// <auto-generated />
using System;
using FudballManagement.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FudballManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250518111938_smth")]
    partial class smth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FudballManagement.Domain.Entities.Order.Orders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OverallPrice")
                        .HasColumnType("numeric");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.Stadium", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasLights")
                        .HasColumnType("boolean");

                    b.Property<string>("LandMark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("numeric");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StadiumPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("StadiumName")
                        .IsUnique();

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.StadiumComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StadiumId");

                    b.ToTable("stadiumComments");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.StadiumMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.ToTable("stadiumMedias");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.StadiumRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<long>("StadiumId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StadiumId");

                    b.ToTable("stadiumRatings");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Users.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Users.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Order.Orders", b =>
                {
                    b.HasOne("FudballManagement.Domain.Entities.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FudballManagement.Domain.Entities.Stadiums.Stadium", "Stadiums")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Stadiums");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.Stadium", b =>
                {
                    b.HasOne("FudballManagement.Domain.Entities.Users.Admin", "Admin")
                        .WithMany("Stadiums")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.StadiumComment", b =>
                {
                    b.HasOne("FudballManagement.Domain.Entities.Users.Customer", "Customer")
                        .WithMany("stadiumComments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FudballManagement.Domain.Entities.Stadiums.Stadium", "Stadium")
                        .WithMany("StadiumComments")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.StadiumMedia", b =>
                {
                    b.HasOne("FudballManagement.Domain.Entities.Stadiums.Stadium", "Stadium")
                        .WithMany("StadiumMedias")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.StadiumRating", b =>
                {
                    b.HasOne("FudballManagement.Domain.Entities.Users.Customer", "Customer")
                        .WithMany("StadiumRatings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FudballManagement.Domain.Entities.Stadiums.Stadium", "Stadium")
                        .WithMany("stadiumRatings")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Stadiums.Stadium", b =>
                {
                    b.Navigation("StadiumComments");

                    b.Navigation("StadiumMedias");

                    b.Navigation("stadiumRatings");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Users.Admin", b =>
                {
                    b.Navigation("Stadiums");
                });

            modelBuilder.Entity("FudballManagement.Domain.Entities.Users.Customer", b =>
                {
                    b.Navigation("StadiumRatings");

                    b.Navigation("stadiumComments");
                });
#pragma warning restore 612, 618
        }
    }
}
